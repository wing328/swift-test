openapi: 3.0.3
info:
  title: OneOf test
  description: OneOf test
  contact:
    email: team@openapitools.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
servers:
  - url: http://localhost:3000/
paths:
  /v1/endpoint:
    post:
      parameters:
        - $ref: '#/components/parameters/stage'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RequestModelA'
                - $ref: '#/components/schemas/RequestModelB'
                - $ref: '#/components/schemas/RequestModelC'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseModelA'
components:
  parameters:
    stage:
      in: header
      name: Stage
      required: true
      schema:
        type: string
        enum: ["prod", "int"]
  schemas:
    RequestModelA:
      type: object
      properties:
        id: 
          type: string
        type:
          type: string
          enum: ["value1", "value2", "value3"]
        scope:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        [id, type, scope, name, description]
    RequestModelB:
      type: object
      properties:
        type:
          type: string
          enum: ["value1", "value2", "value3"]
        summary:
          type: string
      required:
        [type, summary]
    RequestModelC:
      type: object
      properties:
        id: 
          type: string
        type:
          type: string
          enum: ["value1", "value2", "value3"]
        key:
          type: string
      required:
        [id, type, key]
    ResponseModelA:
      type: object
      properties:
        expires: 
          type: integer
          format: int32
        value_1:
          type: string
        value_2:
          type: string
        value_type:
          type: string
      required:
        [expires, value_1, value_2]
    ResponseModelB:
      type: object
      properties:
        expires: 
          type: integer
          format: int32
        value_1:
          type: string
        value_2:
          type: string
        value_type:
          type: string
      required:
        [expires, value_1]
